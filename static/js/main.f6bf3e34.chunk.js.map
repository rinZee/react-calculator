{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","input","setInput","pressNum","e","target","value","pressZero","pressDecimal","arr","split","length","indexOf","clearInput","pressOperator","evaluate","Math","round","eval","toString","id","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2qBAKMA,IAAM,SAANA,MAAa,IAAD,UACUC,oDAAS,KADnB,8LACTC,MADS,cACFC,SADE,cAEZC,SAAW,SAACC,GAGZF,SADY,MAAVD,MACOG,EAAEC,OAAOC,MAGZL,MAAQG,EAAEC,OAAOC,QAIrBC,UAAY,SAACH,GACJ,MAAVH,OACDC,SAASD,MAAQG,EAAEC,OAAOC,QAIxBE,aAAe,SAACJ,GAEtB,IAAIK,EAAMR,MAAMS,MAAM,YACiB,IAApCD,EAAIA,EAAIE,OAAO,GAAGC,QAAQ,MAC3BV,SAASD,MAAQG,EAAEC,OAAOC,QAGxBO,WAAa,WACjBX,SAAS,MAELY,cAAgB,SAACV,GACrBF,SAASD,MAAQG,EAAEC,OAAOC,QAIpBS,SAAW,SAAXA,WACJb,UAAUc,KAAKC,MAAM,KAAgBC,KAAKjB,QAAU,MAAekB,aAGrE,OACE,kEAAKC,GAAG,cAER,kEAAKA,GAAG,UAAUC,UAAU,WAAWpB,OAGvC,kEAAKoB,UAAU,kBACf,qEAAQD,GAAG,QAAQC,UAAU,mBAAmBC,QAAST,YAAzD,MAEA,qEAAQO,GAAG,QAAQC,UAAU,YAAYf,MAAM,IAAIgB,QAASnB,UAA5D,KACA,qEAAQiB,GAAG,QAAQC,UAAU,YAAYf,MAAM,IAAIgB,QAASnB,UAA5D,KACA,qEAAQiB,GAAG,OAAOC,UAAU,YAAYf,MAAM,IAAIgB,QAASnB,UAA3D,KACA,qEAAQiB,GAAG,OAAOC,UAAU,YAAYf,MAAM,IAAIgB,QAASnB,UAA3D,KACA,qEAAQiB,GAAG,OAAOC,UAAU,YAAYf,MAAM,IAAIgB,QAASnB,UAA3D,KACA,qEAAQiB,GAAG,MAAMC,UAAU,YAAYf,MAAM,IAAIgB,QAASnB,UAA1D,KACA,qEAAQiB,GAAG,MAAMC,UAAU,YAAYf,MAAM,IAAIgB,QAASnB,UAA1D,KACA,qEAAQiB,GAAG,MAAMC,UAAU,YAAYf,MAAM,IAAIgB,QAASnB,UAA1D,KACA,qEAAQiB,GAAG,QAAQC,UAAU,YAAYf,MAAM,IAAIgB,QAASnB,UAA5D,KACA,qEAAQiB,GAAG,OAAOC,UAAU,kBAAkBf,MAAM,IAAIgB,QAASf,WAAjE,KACA,qEAAQa,GAAG,UAAUC,UAAU,YAAYf,MAAM,IAAIgB,QAASd,cAA9D,MAGA,kEAAKa,UAAU,iBACf,qEAAQD,GAAG,SAASd,MAAM,IAAIgB,QAASR,eAAvC,KACA,qEAAQM,GAAG,WAAWd,MAAM,IAAIgB,QAASR,eAAzC,KACA,qEAAQM,GAAG,WAAWd,MAAM,IAAIgB,QAASR,eAAzC,KACA,qEAAQM,GAAG,MAAMd,MAAM,IAAIgB,QAASR,eAApC,KACA,qEAAQM,GAAG,SAASC,UAAU,SAASC,QAASP,UAAhD,QAMWhB,2B,iKC/DKwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC/B,EAAA,EAAD,OAEFgC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f6bf3e34.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport {useState} from 'react';\r\n\r\n\r\nconst App = () => {\r\n  const [input, setInput] = useState('0')\r\nconst pressNum = (e) => {\r\n    \r\n     if(input === '0') {\r\n      setInput(e.target.value)\r\n      } \r\n      else {\r\n   setInput(input + e.target.value)\r\n    }\r\n  }\r\n\r\n  const pressZero = (e) => {\r\n    if(input !== '0') {\r\n      setInput(input + e.target.value)\r\n    }\r\n  }\r\n  \r\n  const pressDecimal = (e) => {\r\n//  if input is '5+5-5'\r\n  let arr = input.split(/[-+*/]+/);\r\n  if(arr[arr.length-1].indexOf('.') === -1) {\r\n    setInput(input + e.target.value)\r\n  }\r\n}\r\nconst clearInput = () => {\r\n  setInput('0')\r\n  }\r\nconst pressOperator = (e) => {\r\n  setInput(input + e.target.value)\r\n\r\n  }\r\n\r\n  const evaluate = () => {\r\n    setInput((Math.round(1000000000000 * eval(input)) / 1000000000000).toString())\r\n  }\r\n\r\n  return (\r\n    <div id=\"calculator\">\r\n                \r\n    <div id=\"display\" className=\"display\">{input}</div>\r\n\r\n    \r\n    <div className=\"nums-container\">\r\n    <button id=\"clear\" className=\"light-grey big-w\" onClick={clearInput}>AC</button>\r\n        \r\n    <button id=\"seven\" className='dark-grey' value='7' onClick={pressNum}>7</button>\r\n    <button id=\"eight\" className='dark-grey' value='8' onClick={pressNum}>8</button>\r\n    <button id=\"nine\" className='dark-grey' value='9' onClick={pressNum}>9</button>\r\n    <button id=\"four\" className='dark-grey' value='4' onClick={pressNum}>4</button>\r\n    <button id=\"five\" className='dark-grey' value='5' onClick={pressNum}>5</button>\r\n    <button id=\"six\" className='dark-grey' value='6' onClick={pressNum}>6</button>\r\n    <button id=\"one\" className='dark-grey' value='1' onClick={pressNum}>1</button>\r\n    <button id=\"two\" className='dark-grey' value='2' onClick={pressNum}>2</button>\r\n    <button id=\"three\" className='dark-grey' value='3' onClick={pressNum}>3</button>\r\n    <button id=\"zero\" className='dark-grey big-w' value='0' onClick={pressZero}>0</button>\r\n    <button id=\"decimal\" className='dark-grey' value='.' onClick={pressDecimal}>.</button>\r\n\r\n    </div>\r\n    <div className=\"ops-container\">\r\n    <button id=\"divide\" value='/' onClick={pressOperator}>/</button>\r\n    <button id=\"multiply\" value='*' onClick={pressOperator}>*</button>\r\n    <button id=\"subtract\" value='-' onClick={pressOperator}>-</button>\r\n    <button id=\"add\" value='+' onClick={pressOperator}>+</button>\r\n    <button id=\"equals\" className=\"orange\" onClick={evaluate}>=</button>\r\n    </div>\r\n  </div>  \r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}